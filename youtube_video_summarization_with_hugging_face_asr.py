# -*- coding: utf-8 -*-
"""YouTube Video Summarization with Hugging Face ASR

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VkkfukAc10PgiTHESBigKJ61bROH4mzH

# Download YouTube Video's Audio
"""



! pip install pytube -q

from pytube import YouTube

#VIDEO_URL = "https://www.youtube.com/watch?v=hWLf6JFbZoo" #obama

VIDEO_URL = 'https://www.youtube.com/watch?v=h-JVjs9AAmQ' #batman

#VIDEO_URL = 'https://youtu.be/qNJRGHk7sN8'

yt = YouTube(VIDEO_URL)

yt.streams \
  .filter(only_audio = True, file_extension = 'mp4') \
  .first() \
  .download(filename = 'ytaudio.mp4') \

! ffmpeg -i ytaudio.mp4 -acodec pcm_s16le -ar 16000 ytaudio.wav

"""# English ASR with HuggingSound"""

!pip install huggingsound -q

from huggingsound import SpeechRecognitionModel

import torch
device = "cuda" if torch.cuda.is_available() else "cpu"

device

model = SpeechRecognitionModel("jonatasgrosman/wav2vec2-large-xlsr-53-english", device = device)

"""OUT OF MEMORY (OOM) error

# Audio Chunking
"""

import librosa

input_file = '/content/ytaudio.wav'

print(librosa.get_samplerate(input_file))

# Stream over 30 seconds chunks rather than load the full file
stream = librosa.stream(
    input_file,
    block_length=30,
    frame_length=16000,
    hop_length=16000
)

import soundfile as sf

for i,speech in enumerate(stream):
  sf.write(f'{i}.wav', speech, 16000)

i

"""# Audio Transcription / ASR / Speech to Text"""

audio_path =[]
for a in range(i+1):
  audio_path.append(f'/content/{a}.wav')

audio_path

transcriptions = model.transcribe(audio_path)

full_transcript = ' '

for item in transcriptions:
  full_transcript += ''.join(item['transcription'])

len(full_transcript)



"""# Text Summarization"""

from transformers import pipeline

summarization = pipeline('summarization')

summarized_text = summarization(full_transcript)

summarized_text[0]['summary_text']

"""Text Chunking before Summarization"""

num_iters = int(len(full_transcript)/1000)
summarized_text = []
for i in range(0, num_iters + 1):
  start = 0
  start = i * 1000
  end = (i + 1) * 1000
  #print("input text \n" + full_transcript[start:end])
  out = summarization(full_transcript[start:end], min_length = 5, max_length=20)
  out = out[0]
  out = out['summary_text']
 # print("Summarized text\n"+out)
  summarized_text.append(out)

#print(summarized_text)

